@page "/"


@inject IJSRuntime JSRuntime
@inject HabbitClient _habbitClient

<PageTitle>EHB</PageTitle>

<h1>Welcome to Eleni's healthy habbits!</h1>



@code{
    private List<Recipe>? recipes = new List<Recipe>();

    Recipe rece = new Recipe();

    protected override async Task OnInitializedAsync()
    {
        // Perform asynchronous initialization tasks
        await Load();
    }
    private async Task Load()
    {
        recipes = await _habbitClient.LoadAsync();
    }

   
}


<div class="container">

    <div class="insert-container">
        <div class="insert-habbit">

            <div>
                <label for="imageUrl">Image URL:</label>
                <input type="text" id="imageUrl" @bind="rece.ImageUrl" />
            </div>
            <div>
                <label for="title">Title:</label>
                <input type="text" id="title" @bind="rece.Title" />
            </div>
            <div>
                <label for="description">Description:</label>
                <textarea id="description" @bind="rece.Description"></textarea>
            </div>
            <button @onclick="() =>  _habbitClient.InsertHabbitAsync(rece)">Save</button>
         </div>
    </div>

    <div class="habbit-list">

        @if (recipes == null || !recipes.Any())
        {
            <div class="habbit-card">
                <img />
                <h2>Sorry could not find any prompts now</h2>
                <p>Please come back later! See ya later alegater :)</p>
            </div>
        }
        else
        {
            @foreach (var recipe in recipes)
            {
                <div class="recipe-card polaroid" id="@recipe.Id">

                    <img class="smaller-img" src="@recipe.ImageUrl" alt="@recipe.Title"/>

                    @if (EditMode)
                    {
                        <input type="text" @bind="recipe.ImageUrl" />
                    }
                    else
                    {
                        <h2>@recipe.Title</h2>
                    }
                    @if (EditMode)
                    {
                        <input type="text" @bind="recipe.Title" />
                    }
                    else
                    {
                        <p>@recipe.Description</p>
                    }

                    @if (EditMode)
                    {
                        <textarea @bind="recipe.Description"></textarea>
                    }
                   
                    @if (EditMode)
                    {
                        ScrollToDiv(JSRuntime, recipe.Id.ToString());
                        <button @onclick="(e) => {EditMode = !EditMode;}">Cancel</button>

                        <button @onclick="(e) => {_habbitClient.SaveHabbitAsync(recipe);EditMode = !EditMode;}">Save</button>
                    }
                    else
                    {
                        <button @onclick="(e) => {EditMode = !EditMode;ScrollToDiv(JSRuntime, recipe.Id.ToString());}">Edit</button>

                    }
                    <button @onclick="() => _habbitClient.DeleteHabbitAsync(recipe.Id)">Delete</button>
                </div>


            }
        }


    </div>
</div>


<script>
    function scrollToElement(id) {
        var element = document.getElementById(id);
        if (element) {
            element.scrollIntoView({ behavior: 'smooth' });
        }
    }

    function executeScrollToDiv(id) {
        scrollToElement(id);
    }
</script>

@code {
    bool EditMode = false;

    async Task ScrollToDiv(IJSRuntime runTime,string id)
    {
       await  ExecuteJavaScript(runTime,$"executeScrollToDiv('{id}');");
    }

    async Task ExecuteJavaScript(IJSRuntime runTime,string js)
    {
        await runTime.InvokeVoidAsync("eval", js);
    }
}


<style>

    /* buttons */

    div button {
        display: block;
        margin: 2px;
        touch-action: none;
    }

    div.polaroid {
        width: 80%;
        background-color: white;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    }

    .smaller-img {
        max-width: 30%;
        max-height: 30%
    }

    div.container {
        text-align: center;
        padding: 10px 20px;
    }

/* 
    insert card properties  */

    .insert-habbit {
        padding: 10px 20px;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
    }

        /* On mouse-over, add a deeper shadow */
        .insert-habbit:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

    /* Add some padding inside the card container */
    .insert-container {
        padding: 2px 16px;
    }





    .container {
        max-width: 1200px;
        margin: auto;
        padding: 20px;
    }

    .insert-habbit, .habbit-list {
        margin-bottom: 30px;
        padding-right: 30px;
    }

        .insert-habbit label, .habbit-list label {
            font-weight: bold;
            color: #333;
        }

        .insert-habbit input[type="text"], .insert-habbit textarea, .habbit-list input[type="text"], .habbit-list textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .insert-habbit button, .habbit-list button {
            padding: 10px 20px;
            background-color: #ffcc00;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .insert-habbit button:hover, .habbit-list button:hover {
                background-color: #ff9900;
            }

    .recipe-card {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 20px;
        margin-bottom: 20px;
    }

        .recipe-card img {
            width: 100%;
            border-radius: 5px;
            cursor: pointer;
        }

        .recipe-card h2 {
            margin-top: 0;
            color: #333;
        }

        .recipe-card p {
            color: #666;
        }

        .recipe-card textarea {
            width: 100%;
            padding: 10px;
            margin-top: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        
</style>

   