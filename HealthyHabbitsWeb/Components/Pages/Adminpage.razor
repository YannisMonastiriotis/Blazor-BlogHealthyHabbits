@page "/admin"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles ="admin")]

@inject IJSRuntime JSRuntime
@inject HabbitClient _habbitClient



<PageTitle>EHB</PageTitle>


@code{
    private List<Recipe>? recipes = new List<Recipe>();

    Recipe rece = new Recipe();

    protected override async Task OnInitializedAsync()
    {
        _habbitClient.DataChanged += HandleDataChanged;

        // Load data initially
        await Load();
    }
    private async Task Load()
    {
        recipes = await _habbitClient.LoadAsync();
        StateHasChanged(); // Ensure UI update after data loading
        Console.WriteLine("Data Loaded");
    }

    private async void HandleDataChanged(object sender, EventArgs e)
    {
        // Handle the DataChanged event: reload data and trigger UI update
        await Load();
    }
}


<div class="container">
    
    <AuthorizeView Roles="admin">
        <Authorized>
              
             <a href="/logout" class="btn btn-light alert font-monospace">Logout</a>
        </Authorized>
    </AuthorizeView>
    <div class="insert-container">
        <div class="insert-habbit">

            <div>
                <label for="imageUrl">Image URL:</label>
                <input type="text" id="imageUrl" @bind="rece.ImageUrl" />
            </div>
            <div>
                <label for="title">Title:</label>
                <input type="text" id="title" @bind="rece.Title" />
            </div>
            <div>
                <label for="description">Description:</label>
                <textarea id="description" @bind="rece.Description"></textarea>
            </div>
            <button @onclick="() =>  _habbitClient.InsertHabbitAsync(rece)">Save</button>
         </div>
    </div>

    <AuthorizeView Roles="admin">
        <Authorized>
              
            
                  

            <div class="habbit-list">

                @if (recipes == null || !recipes.Any())
                {
                    <div class="habbit-card">
                        <img />
                        <h2>Sorry could not find any prompts now</h2>
                        <p>Please come back later! See ya later alegater :)</p>
                    </div>
                }
                else
                {
                    @foreach (var recipe in recipes)
                    {
                        <div class="recipe-card polaroid" id="@recipe.Id">

                            <img class="smaller-img" src="@recipe.ImageUrl" alt="@recipe.Title" />

                            @if (EditMode)
                            {
                                <input type="text" @bind="recipe.ImageUrl" />
                            }
                            else
                            {
                                <h2>@recipe.Title</h2>
                            }
                            @if (EditMode)
                            {
                                <input type="text" @bind="recipe.Title" />
                            }
                            else
                            {
                                <p>@recipe.Description</p>
                            }

                            @if (EditMode)
                            {
                                <textarea @bind="recipe.Description"></textarea>
                            }

                            @if (EditMode)
                            {
                                ScrollToDiv(JSRuntime, recipe.Id.ToString());
                                <button @onclick="(e) => {EditMode = !EditMode;}">Cancel</button>

                                <button @onclick="(e) => {_habbitClient.SaveHabbitAsync(recipe);EditMode = !EditMode;}">Save</button>
                            }
                            else
                            {
                                <button @onclick="(e) => {EditMode = !EditMode;ScrollToDiv(JSRuntime, recipe.Id.ToString());}">Edit</button>

                            }
                            <button @onclick="() => _habbitClient.DeleteHabbitAsync(recipe.Id)">Delete</button>
                        </div>


                    }
                }


            </div>
        </Authorized>
        <NotAuthorized>
            <div class="habbit-card">
                <img />
                <h2>Welcome Admin</h2>
                <p>Please sign up!</p>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>


<script>
    function scrollToElement(id) {
        var element = document.getElementById(id);
        if (element) {
            element.scrollIntoView({ behavior: 'smooth' });
        }
    }

    function executeScrollToDiv(id) {
        scrollToElement(id);
    }
</script>

@code {
    bool EditMode = false;

    async Task ScrollToDiv(IJSRuntime runTime,string id)
    {
       await  ExecuteJavaScript(runTime,$"executeScrollToDiv('{id}');");
    }

    async Task ExecuteJavaScript(IJSRuntime runTime,string js)
    {
        await runTime.InvokeVoidAsync("eval", js);
    }

}

   